var a = 1;
最前面的var，是变量声明命令。它表示通知解释引擎，要创建一个变量a。
JavaScript 的变量名区分大小写，A和a是两个不同的变量。
JavaScript 是一种动态类型语言，也就是说，变量的类型没有限制，变量可以随时更改类型。
switch语句后面的表达式，与case语句后面的表示式比较运行结果时，采用的是严格相等运算符（===），而不是相等运算符（==），这意味着比较时不会发生类型转换。
所有for循环，都可以改写成while循环。上面的例子改为while循环，代码如下。
undefined,null,false,0,NaN,"",'',在转换规则下被视为false，空数组（[]）和空对象（{}）对应的布尔值，都是true。
NaN是 JavaScript 的特殊值，表示“非数字”（Not a Number），主要出现在将字符串解析成数字出错的场合。NaN不等于任何值，包括它本身。NaN === NaN // false
函数参数如果是原始类型的值（数值、字符串、布尔值），传递方式是传值传递（passes by value）。这意味着，在函数体内修改参数值，不会影响到函数外部。
如果函数参数是复合类型的值（数组、对象、其他函数），传递方式是传址传递（pass by reference）。也就是说，传入函数的原始值的地址，因此在函数内部修改参数，将会影响到原始值。
arr.0的写法不合法，因为单独的数值不能作为标识符（identifier）。所以，数组成员只能用方括号arr[0]表示（方括号是运算符，可以接受数值）。
length属性不过滤空位。所以，使用length属性进行数组遍历，一定要非常小心。
自增和自减运算符有一个需要注意的地方，就是放在变量之后，会先返回变量操作前的值，再进行自增/自减操作；放在变量之前，会先进行自增/自减操作，再返回变量操作后的值。
相等运算符隐藏的类型转换，会带来一些违反直觉的结果。因此建议不要使用相等运算符（==），最好只使用严格相等运算符（===）。
console.log方法的参数必须是一个表达式。
